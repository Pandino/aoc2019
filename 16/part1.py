puzzle_input = '59782619540402316074783022180346847593683757122943307667976220344797950034514416918778776585040527955353805734321825495534399127207245390950629733658814914072657145711801385002282630494752854444244301169223921275844497892361271504096167480707096198155369207586705067956112600088460634830206233130995298022405587358756907593027694240400890003211841796487770173357003673931768403098808243977129249867076581200289745279553289300165042557391962340424462139799923966162395369050372874851854914571896058891964384077773019120993386024960845623120768409036628948085303152029722788889436708810209513982988162590896085150414396795104755977641352501522955134675'
test1 = '03036732577212944063491565474664'



base_pattern = (0, 1, 0, -1)

def _pattern(n):
    '''Infinite iterator returning the proper pattern for the n-th line'''
    pos = 0
    while True:
        for _ in range(n):
            yield base_pattern[pos%4]
        pos += 1

def pattern_iter(n):
    p = _pattern(n)
    next(p)
    yield from p

def phase(signal, iterations):
    
    for _ in range(iterations):
        new_signal = list()
        for n in range(len(signal)):
            p = pattern_iter(n + 1)
            total = sum([s * next(p) for s in signal])
            new_signal.append(abs(total) % 10)
        signal = new_signal
    return signal
        
        
        
offset = int(test1[:8])
result = phase([int(i) for i in test1*10000], 100)[offset:offset+8]
print(''.join([str(i) for i in result]))